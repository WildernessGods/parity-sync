<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.parity.paritysync.dao.BlockUncleMapper">
    <resultMap id="BaseResultMap" type="com.parity.paritysync.bean.BlockUncle">
        <id column="hash" jdbcType="VARCHAR" property="hash"/>
        <result column="number" jdbcType="BIGINT" property="number"/>
        <result column="parentHash" jdbcType="VARCHAR" property="parenthash"/>
        <result column="position" jdbcType="INTEGER" property="position"/>
        <result column="nonce" jdbcType="VARCHAR" property="nonce"/>
        <result column="mixHash" jdbcType="VARCHAR" property="mixhash"/>
        <result column="sha3Uncles" jdbcType="VARCHAR" property="sha3uncles"/>
        <result column="logsBloom" jdbcType="VARCHAR" property="logsbloom"/>
        <result column="transactionsRoot" jdbcType="VARCHAR" property="transactionsroot"/>
        <result column="stateRoot" jdbcType="VARCHAR" property="stateroot"/>
        <result column="receiptsRoot" jdbcType="VARCHAR" property="receiptsroot"/>
        <result column="author" jdbcType="VARCHAR" property="author"/>
        <result column="miner" jdbcType="VARCHAR" property="miner"/>
        <result column="difficulty" jdbcType="VARCHAR" property="difficulty"/>
        <result column="totalDifficulty" jdbcType="VARCHAR" property="totaldifficulty"/>
        <result column="extraData" jdbcType="VARCHAR" property="extradata"/>
        <result column="size" jdbcType="INTEGER" property="size"/>
        <result column="gasLimit" jdbcType="BIGINT" property="gaslimit"/>
        <result column="gasUsed" jdbcType="BIGINT" property="gasused"/>
        <result column="timestamp" jdbcType="TIMESTAMP" property="timestamp"/>
        <result column="uncleByNumber" jdbcType="BIGINT" property="unclebynumber"/>
        <result column="uncleByHash" jdbcType="VARCHAR" property="unclebyhash"/>
        <result column="uncleReward" jdbcType="DOUBLE" property="unclereward"/>
    </resultMap>
    <sql id="Base_Column_List">
    hash, number, parentHash, position, nonce, mixHash, sha3Uncles, logsBloom, transactionsRoot, 
    stateRoot, receiptsRoot, author, miner, difficulty, totalDifficulty, extraData, size, 
    gasLimit, gasUsed, timestamp, uncleByNumber, uncleByHash, uncleReward
  </sql>
    <sql id="Return_Column_List">
    hash, number, parentHash, position, sha3Uncles, author, miner, difficulty, gasLimit, gasUsed, timestamp, uncleByNumber, uncleByHash, uncleReward
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from block_uncle
        where hash = #{hash,jdbcType=VARCHAR}
    </select>
    <insert id="insert" parameterType="com.parity.paritysync.bean.BlockUncle">
    insert into block_uncle (hash, number, parentHash, 
      position, nonce, mixHash, 
      sha3Uncles, logsBloom, transactionsRoot, 
      stateRoot, receiptsRoot, author, 
      miner, difficulty, totalDifficulty, 
      extraData, size, gasLimit, 
      gasUsed, timestamp, uncleByNumber, 
      uncleByHash, uncleReward)
    values (#{hash,jdbcType=VARCHAR}, #{number,jdbcType=BIGINT}, #{parenthash,jdbcType=VARCHAR}, 
      #{position,jdbcType=INTEGER}, #{nonce,jdbcType=VARCHAR}, #{mixhash,jdbcType=VARCHAR}, 
      #{sha3uncles,jdbcType=VARCHAR}, #{logsbloom,jdbcType=VARCHAR}, #{transactionsroot,jdbcType=VARCHAR}, 
      #{stateroot,jdbcType=VARCHAR}, #{receiptsroot,jdbcType=VARCHAR}, #{author,jdbcType=VARCHAR}, 
      #{miner,jdbcType=VARCHAR}, #{difficulty,jdbcType=VARCHAR}, #{totaldifficulty,jdbcType=VARCHAR}, 
      #{extradata,jdbcType=VARCHAR}, #{size,jdbcType=INTEGER}, #{gaslimit,jdbcType=BIGINT}, 
      #{gasused,jdbcType=BIGINT}, #{timestamp,jdbcType=TIMESTAMP}, #{unclebynumber,jdbcType=BIGINT}, 
      #{unclebyhash,jdbcType=VARCHAR}, #{unclereward,jdbcType=DOUBLE})
  </insert>
    <insert id="insertSelective" parameterType="com.parity.paritysync.bean.BlockUncle">
        insert into block_uncle
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="hash != null">
                hash,
            </if>
            <if test="number != null">
                number,
            </if>
            <if test="parenthash != null">
                parentHash,
            </if>
            <if test="position != null">
                position,
            </if>
            <if test="nonce != null">
                nonce,
            </if>
            <if test="mixhash != null">
                mixHash,
            </if>
            <if test="sha3uncles != null">
                sha3Uncles,
            </if>
            <if test="logsbloom != null">
                logsBloom,
            </if>
            <if test="transactionsroot != null">
                transactionsRoot,
            </if>
            <if test="stateroot != null">
                stateRoot,
            </if>
            <if test="receiptsroot != null">
                receiptsRoot,
            </if>
            <if test="author != null">
                author,
            </if>
            <if test="miner != null">
                miner,
            </if>
            <if test="difficulty != null">
                difficulty,
            </if>
            <if test="totaldifficulty != null">
                totalDifficulty,
            </if>
            <if test="extradata != null">
                extraData,
            </if>
            <if test="size != null">
                size,
            </if>
            <if test="gaslimit != null">
                gasLimit,
            </if>
            <if test="gasused != null">
                gasUsed,
            </if>
            <if test="timestamp != null">
                timestamp,
            </if>
            <if test="unclebynumber != null">
                uncleByNumber,
            </if>
            <if test="unclebyhash != null">
                uncleByHash,
            </if>
            <if test="unclereward != null">
                uncleReward,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="hash != null">
                #{hash,jdbcType=VARCHAR},
            </if>
            <if test="number != null">
                #{number,jdbcType=BIGINT},
            </if>
            <if test="parenthash != null">
                #{parenthash,jdbcType=VARCHAR},
            </if>
            <if test="position != null">
                #{position,jdbcType=INTEGER},
            </if>
            <if test="nonce != null">
                #{nonce,jdbcType=VARCHAR},
            </if>
            <if test="mixhash != null">
                #{mixhash,jdbcType=VARCHAR},
            </if>
            <if test="sha3uncles != null">
                #{sha3uncles,jdbcType=VARCHAR},
            </if>
            <if test="logsbloom != null">
                #{logsbloom,jdbcType=VARCHAR},
            </if>
            <if test="transactionsroot != null">
                #{transactionsroot,jdbcType=VARCHAR},
            </if>
            <if test="stateroot != null">
                #{stateroot,jdbcType=VARCHAR},
            </if>
            <if test="receiptsroot != null">
                #{receiptsroot,jdbcType=VARCHAR},
            </if>
            <if test="author != null">
                #{author,jdbcType=VARCHAR},
            </if>
            <if test="miner != null">
                #{miner,jdbcType=VARCHAR},
            </if>
            <if test="difficulty != null">
                #{difficulty,jdbcType=VARCHAR},
            </if>
            <if test="totaldifficulty != null">
                #{totaldifficulty,jdbcType=VARCHAR},
            </if>
            <if test="extradata != null">
                #{extradata,jdbcType=VARCHAR},
            </if>
            <if test="size != null">
                #{size,jdbcType=INTEGER},
            </if>
            <if test="gaslimit != null">
                #{gaslimit,jdbcType=BIGINT},
            </if>
            <if test="gasused != null">
                #{gasused,jdbcType=BIGINT},
            </if>
            <if test="timestamp != null">
                #{timestamp,jdbcType=TIMESTAMP},
            </if>
            <if test="unclebynumber != null">
                #{unclebynumber,jdbcType=BIGINT},
            </if>
            <if test="unclebyhash != null">
                #{unclebyhash,jdbcType=VARCHAR},
            </if>
            <if test="unclereward != null">
                #{unclereward,jdbcType=DOUBLE},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.parity.paritysync.bean.BlockUncle">
        update block_uncle
        <set>
            <if test="number != null">
                number = #{number,jdbcType=BIGINT},
            </if>
            <if test="parenthash != null">
                parentHash = #{parenthash,jdbcType=VARCHAR},
            </if>
            <if test="position != null">
                position = #{position,jdbcType=INTEGER},
            </if>
            <if test="nonce != null">
                nonce = #{nonce,jdbcType=VARCHAR},
            </if>
            <if test="mixhash != null">
                mixHash = #{mixhash,jdbcType=VARCHAR},
            </if>
            <if test="sha3uncles != null">
                sha3Uncles = #{sha3uncles,jdbcType=VARCHAR},
            </if>
            <if test="logsbloom != null">
                logsBloom = #{logsbloom,jdbcType=VARCHAR},
            </if>
            <if test="transactionsroot != null">
                transactionsRoot = #{transactionsroot,jdbcType=VARCHAR},
            </if>
            <if test="stateroot != null">
                stateRoot = #{stateroot,jdbcType=VARCHAR},
            </if>
            <if test="receiptsroot != null">
                receiptsRoot = #{receiptsroot,jdbcType=VARCHAR},
            </if>
            <if test="author != null">
                author = #{author,jdbcType=VARCHAR},
            </if>
            <if test="miner != null">
                miner = #{miner,jdbcType=VARCHAR},
            </if>
            <if test="difficulty != null">
                difficulty = #{difficulty,jdbcType=VARCHAR},
            </if>
            <if test="totaldifficulty != null">
                totalDifficulty = #{totaldifficulty,jdbcType=VARCHAR},
            </if>
            <if test="extradata != null">
                extraData = #{extradata,jdbcType=VARCHAR},
            </if>
            <if test="size != null">
                size = #{size,jdbcType=INTEGER},
            </if>
            <if test="gaslimit != null">
                gasLimit = #{gaslimit,jdbcType=BIGINT},
            </if>
            <if test="gasused != null">
                gasUsed = #{gasused,jdbcType=BIGINT},
            </if>
            <if test="timestamp != null">
                timestamp = #{timestamp,jdbcType=TIMESTAMP},
            </if>
            <if test="unclebynumber != null">
                uncleByNumber = #{unclebynumber,jdbcType=BIGINT},
            </if>
            <if test="unclebyhash != null">
                uncleByHash = #{unclebyhash,jdbcType=VARCHAR},
            </if>
            <if test="unclereward != null">
                uncleReward = #{unclereward,jdbcType=DOUBLE},
            </if>
        </set>
        where hash = #{hash,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.parity.paritysync.bean.BlockUncle">
    update block_uncle
    set number = #{number,jdbcType=BIGINT},
      parentHash = #{parenthash,jdbcType=VARCHAR},
      position = #{position,jdbcType=INTEGER},
      nonce = #{nonce,jdbcType=VARCHAR},
      mixHash = #{mixhash,jdbcType=VARCHAR},
      sha3Uncles = #{sha3uncles,jdbcType=VARCHAR},
      logsBloom = #{logsbloom,jdbcType=VARCHAR},
      transactionsRoot = #{transactionsroot,jdbcType=VARCHAR},
      stateRoot = #{stateroot,jdbcType=VARCHAR},
      receiptsRoot = #{receiptsroot,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      miner = #{miner,jdbcType=VARCHAR},
      difficulty = #{difficulty,jdbcType=VARCHAR},
      totalDifficulty = #{totaldifficulty,jdbcType=VARCHAR},
      extraData = #{extradata,jdbcType=VARCHAR},
      size = #{size,jdbcType=INTEGER},
      gasLimit = #{gaslimit,jdbcType=BIGINT},
      gasUsed = #{gasused,jdbcType=BIGINT},
      timestamp = #{timestamp,jdbcType=TIMESTAMP},
      uncleByNumber = #{unclebynumber,jdbcType=BIGINT},
      uncleByHash = #{unclebyhash,jdbcType=VARCHAR},
      uncleReward = #{unclereward,jdbcType=DOUBLE}
    where hash = #{hash,jdbcType=VARCHAR}
  </update>
    <select id="selectByUncleByHash" resultType="com.parity.paritysync.bean.BlockUncle">
        select
        <include refid="Base_Column_List"/>
        from block_uncle
        where uncleByHash = #{uncleByHash,jdbcType=VARCHAR}
    </select>
    <select id="selectAll" resultType="com.parity.paritysync.returntype.ReturnBlockUncle">
        select
        <include refid="Return_Column_List"/>
        from block_uncle
    </select>
    <select id="selectCountByAuthor" resultType="java.lang.Long">

    </select>
</mapper>